# Shield Foundation Website - Production Environment Configuration
# Copy this file to .env in backend/ and frontend/ directories and update values

# =============================================================================
# BACKEND ENVIRONMENT VARIABLES (backend/.env)
# =============================================================================

# Database Configuration
MONGO_URL=mongodb://localhost:27017/shield_foundation
# For MongoDB Atlas (cloud): mongodb+srv://username:password@cluster.mongodb.net/shield_foundation

# Security Configuration  
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-use-openssl-rand-hex-32
# Generate with: openssl rand -hex 32

# CORS Configuration
CORS_ORIGINS=*
# For production, specify exact origins: https://yourdomain.com,https://www.yourdomain.com

# API Configuration
API_PREFIX=/api
HOST=0.0.0.0
PORT=8001

# Logging Configuration
LOG_LEVEL=INFO
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL

# =============================================================================  
# FRONTEND ENVIRONMENT VARIABLES (frontend/.env)
# =============================================================================

# Backend API URL
REACT_APP_BACKEND_URL=http://localhost:8001
# For production: https://api.yourdomain.com or https://yourdomain.com

# WebSocket Configuration (for development)
WDS_SOCKET_PORT=443

# Build Configuration
GENERATE_SOURCEMAP=false
BUILD_PATH=build

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================

# 1. SECURITY CHECKLIST:
#    - Change default admin credentials (admin/admin123)
#    - Generate strong JWT_SECRET
#    - Use HTTPS in production
#    - Specify exact CORS_ORIGINS
#    - Enable MongoDB authentication
#    - Set up firewall rules

# 2. PERFORMANCE OPTIMIZATION:
#    - Use MongoDB Atlas or optimized MongoDB setup
#    - Enable gzip compression in nginx
#    - Set up CDN for static assets
#    - Configure proper caching headers
#    - Monitor database performance

# 3. MONITORING & LOGGING:
#    - Set up log rotation
#    - Monitor application health
#    - Track database performance
#    - Set up alerting for failures
#    - Regular backup procedures

# 4. SCALING CONSIDERATIONS:
#    - Use load balancer for multiple instances
#    - Consider Redis for session storage
#    - Implement database sharding if needed
#    - Use container orchestration (Kubernetes)
#    - Set up auto-scaling policies